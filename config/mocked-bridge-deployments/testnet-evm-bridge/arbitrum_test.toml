# Block which represents properties for a network
[evm.arbitrumtestnet]
name = "arbitrumtestnet"
# Http(s) Endpoint for quick Req/Res
http-endpoint = "$ARBITRUM_TESTNET_HTTPS_URL"
# Websocket Endpoint for long living connections
ws-endpoint = "$ARBITRUM_TESTNET_WSS_URL"
# Block Explorer
# Optinal, and used for generating clickable links
# for transactions that happen on this chain.
explorer = "https://goerli-rollup-explorer.arbitrum.io/"
# chain specific id from evm opcode
chain-id = 421613
# The Private Key of this account on this network
# the format is more dynamic here:
# 1. if it starts with '0x' then this would be raw (64 bytes) hex encoded
#    private key.
#    Example: 0x8917174396171783496173419137618235192359106130478137647163400318
#
# 2. if it starts with '$' then it would be considered as an Enviroment variable
#    of a hex-encoded private key.
#    Example: $ARBITRUM_TESTNET_PRIVATE_KEY
#
# 3. if it starts with '> ' then it would be considered as a command that
#    the relayer would execute and the output of this command would be the
#    hex encoded private key.
#    Example: > ./getKey.sh arbitrumtestnet-privatekey
#
# 4. if it doesn't contains special characters and has 12 or 24 words in it
#    then we should process it as a mnemonic string: 'word two three four ...'
private-key = "$ARBITRUM_TESTNET_PRIVATE_KEY"
# Value to indicate that the relayer should enable services for this chain
enabled = true

# Block which represents the configuration for a supported contract on the network
[[evm.arbitrumtestnet.contracts]]
# The contract can be one of these values
# - VAnchor (Variable Anchor)
# - SignatureBridge
contract = "VAnchor"
# The address of the contract
address = "0x91a9a1e76fa609f6ba8fcd718a60b030678765ad"
# The deployed block number of the contract. When a relayer does not have information for
# this contract in its store, it will start to sync and query for relevant historical data
# starting at this block number
deployed-at = 171869
# Configuration for the events watcher of this contract. The events-watcher can be switched on/off
# and the polling interval specifies the period of time (in ms) that the events-watcher thread
# will wait before issuing another query for new events.
events-watcher = { enabled = true, polling-interval = 15000 }
# Configuration related to withdraw (for transaction relaying)
#    - withdraw-gasLimit: Value which specifies the maximum amount of gas which will be used when
#                         submitting a withdraw transaction
#    - withdraw-fee-percentage: Value which specifies the fees that this relayer will collect upon
#                               submitting a withdraw transaction
withdraw-config = { withdraw-fee-percentage = 0, withdraw-gaslimit = "0x350000" }
# Entries for this anchor contract's connected edges.
# These fields are used to determine the generation of AnchorUpdate proposals
linked-anchors = [
  { chain = "ropsten", chain-id = "3", address = "0x35295fbb71273b84f66e70b8e341d408150dcaf9" },
  { chain = "rinkeby", chain-id = "4", address = "0x7ae23a95881bf8ab86174e89bd79199f398d19bf" },
  { chain = "goerli", chain-id = "5", address = "0x4e22da303c403daaf4653d3d9d63ef009bae89a6" },
  { chain = "polygontestnet", chain-id = "80001", address = "0xe6b075ecc4ccbc6e66569b1a2984cc47e88ee246" },
  { chain = "optimismtestnet", chain-id = "420", address = "0x12f2c4a1469b035e4459539e38ae68bc4dd5ba07" },
  { chain = "moonbase", chain-id = "1287", address = "0xc6b43568f0c39e3a68b597a3bb54a7b9e4308bf3"}
]
proposal-signing-backend = { type = "Mocked", private-key = "$ARBITRUM_TESTNET_PRIVATE_KEY" }

[[evm.arbitrumtestnet.contracts]]
contract = "SignatureBridge"
address = "0x563519f0ff4aae3d4384e7d0560aa5d58e5a6664"
# The deployed block number of the contract. When a relayer does not have information for
# this contract in its store, it will start to sync and query for relevant historical data
# starting at this block number
deployed-at = 171869
# Configuration for the events watcher of this contract. The events-watcher can be switched on/off
# and the polling interval specifies the period of time (in ms) that the events-watcher thread
# will wait before issuing another query for new events.
events-watcher = { enabled = true, polling-interval = 45000, print-progress-interval = 0 }

# Block which represents properties for a network
[evm.mumbai]
name = "mumbai"
# Http(s) Endpoint for quick Req/Res
http-endpoint = "$MUMBAI_TESTNET_HTTPS_URL"
# Websocket Endpoint for long living connections
ws-endpoint = "$MUMBAI_TESTNET_WSS_URL"
# Block Explorer
# Optinal, and used for generating clickable links
# for transactions that happen on this chain.
explorer = "https://mumbai.polygonscan.com/"
# chain specific id from evm opcode
chain-id = 80001

block-confirmations = 2
# The Private Key of this account on this network
# the format is more dynamic here:
# 1. if it starts with '0x' then this would be raw (64 bytes) hex encoded
#    private key.
#    Example: 0x8917174396171783496173419137618235192359106130478137647163400318
#
# 2. if it starts with '$' then it would be considered as an Enviroment variable
#    of a hex-encoded private key.
#    Example: $POLYGONTESTNET_PRIVATE_KEY
#
# 3. if it starts with '> ' then it would be considered as a command that
#    the relayer would execute and the output of this command would be the
#    hex encoded private key.
#    Example: > ./getKey.sh mumbai-privatekey
#
# 4. if it doesn't contains special characters and has 12 or 24 words in it
#    then we should process it as a mnemonic string: 'word two three four ...'
private-key = "$MUMBAI_TESTNET_PRIVATE_KEY"
# Value to indicate that the relayer should enable services for this chain
enabled = true

# Block which represents the configuration for a supported contract on the network
[[evm.mumbai.contracts]]
# The contract can be one of these values
# - VAnchor (Variable Anchor)
# - SignatureBridge
contract = "VAnchor"
# The address of the contract
address = "0xda27349ee55e7c91e1b521ece4c3dcc390383026"
# The deployed block number of the contract. When a relayer does not have information for
# this contract in its store, it will start to sync and query for relevant historical data
# starting at this block number
deployed-at = 30098018
# Configuration for the events watcher of this contract. The events-watcher can be switched on/off
# and the polling interval specifies the period of time (in ms) that the events-watcher thread
# will wait before issuing another query for new events.
events-watcher = { enabled = true, polling-interval = 15000 }
# Entries for this anchor contract's connected edges.
# These fields are used to determine the generation of AnchorUpdate proposals
linked-anchors = [
  { type = "Evm", chain = "goerli", chain-id = 5, address = "0x3a4233bf223622f6571b8543498a62b9e2a3b31f" },
  { type = "Evm", chain = "sepolia", chain-id = 11155111, address = "0xb2d1d8d651c53a00e13ea0a363aab575a6886391" },
  { type = "Evm", chain = "optimismtestnet", chain-id = 420, address = "0x9d36b94f245857ec7280415140800dde7642addb" },
  { type = "Evm", chain = "moonbase", chain-id = 1287, address = "0xda27349ee55e7c91e1b521ece4c3dcc390383026"}
]
proposal-signing-backend = { type = "Mocked", private-key = "$MOCKED_BACKEND_KEY" }

[[evm.mumbai.contracts]]
contract = "SignatureBridge"
address = "0x206b293e2bc9e81d6af554a4302529d58eef7de7"
# The deployed block number of the contract. When a relayer does not have information for
# this contract in its store, it will start to sync and query for relevant historical data
# starting at this block number
deployed-at = 30097933
# Configuration for the events watcher of this contract. The events-watcher can be switched on/off
# and the polling interval specifies the period of time (in ms) that the events-watcher thread
# will wait before issuing another query for new events.
events-watcher = { enabled = true, polling-interval = 45000, print-progress-interval = 0 }

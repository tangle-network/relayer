# Block which represents properties for a network
[evm.demeter]
# The name that the chain is indexed on, for linkable anchors
name = "demeter"
# Http(s) Endpoint for quick Req/Res
http-endpoint = "$DEMETER_HTTP_URL"
# Websocket Endpoint for long living connections
ws-endpoint = "$DEMETER_WS_URL"
# chain specific id from evm opcode
chain-id = 5003
# The Private Key of this account on this network
# the format is more dynamic here:
# 1. if it starts with '0x' then this would be raw (64 bytes) hex encoded
#    private key.
#    Example: 0x8917174396171783496173419137618235192359106130478137647163400318
#
# 2. if it starts with '$' then it would be considered as an Enviroment variable
#    of a hex-encoded private key.
#    Example: $RINKEBY_PRIVATE_KEY
#
# 3. if it starts with '> ' then it would be considered as a command that
#    the relayer would execute and the output of this command would be the
#    hex encoded private key.
#    Example: > ./getKey.sh rinkeby-privatekey
#
# 4. if it doesn't contains special characters and has 12 or 24 words in it
#    then we should process it as a mnemonic string: 'word two three four ...'
private-key = "$DEMETER_PRIVATE_KEY"
tx-queue = { max-sleep-interval = 1500 }
# Value to indicate that the relayer should enable services for this chain
enabled = true

# Block which represents the configuration for a supported contract on the network
[[evm.demeter.contracts]]
# The contract can be one of these values
# - Anchor (Fixed Anchor)
# - VAnchor (Variable Anchor)
# - SignatureBridge
contract = "VAnchor"
# The address of the contract
address = "0x4e3df2073bf4b43B9944b8e5A463b1E185D6448C"
# The deployed block number of the contract. When a relayer does not have information for
# this contract in its store, it will start to sync and query for relevant historical data
# starting at this block number
deployed-at = 1
# The minimum size configured for deposit / withdraw on the contract
size = 0.01
# Configuration for the events watcher of this contract. The events-watcher can be switched on/off
# and the polling interval specifies the period of time (in ms) that the events-watcher thread
# will wait before issuing another query for new events.
events-watcher = { enabled = true, polling-interval = 1000, print-progress-interval = 60000 }
withdraw-config = { withdraw-fee-percentage = 0, withdraw-gaslimit = "0x350000" }
# Entries for this anchor contract's connected edges.
# These fields are used to determine the generation of AnchorUpdate proposals
linked-anchors = [
  { chain = "5001", address = "0xbfce6B877Ebff977bB6e80B24FbBb7bC4eBcA4df" },
  { chain = "5002", address = "0xcd75Ad7AC9C9325105f798c476E84176648F391A"},
]
# Proposal signing backend can have a value of "Mocked" or the name of the DKG configuration.
# When the type is "Mocked", the supplied private-key will sign any proposed updates and submit
# the signed proposals to the configured SignatureBridge of the relevant chains.
proposal-signing-backend = { type = "Mocked", private-key = "$GOVERNOR_PRIVATE_KEY" }

[[evm.demeter.contracts]]
contract = "SignatureBridge"
address = "0x2946259E0334f33A064106302415aD3391BeD384"
deployed-at = 1
events-watcher = { enabled = true, polling-interval = 1000, print-progress-interval = 60000 }
